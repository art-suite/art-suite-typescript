import &react, &ArtClassSystem, &ArtStandardLib, &@ArtSuite/ArtModels, &@ArtSuite/ArtPipelines, &@ArtSuite/ArtPipelineModels

class SubscriptionObject extends ArtModelSubscriptionsMixin BaseObject
  constructor: (@setSubscriptionState) -> @_state = {}
  setState: (key, value) -> @setSubscriptionState @_state = objectWith @_state, key, value

makeSubscriberHook = (modelName, modelRegistry) ->
  modelRegistry extract models
  unless models[modelName]
    log {} (new Error).stack
    throw new Error "" invalid model name: #{JSON.stringify modelName}. Valid models names: #{}
      if (keys = Object.keys models).length == 0
        "" (no models defined)
      else keys.join ', '

  (key) ->
    if isPlainObject key
      props = key
      initialModelRecord = props[modelName]
      model = models[modelName]
      key = if initialModelRecord then model.toKeyString initialModelRecord else props[modelName + :Id]

    else unless isString key
      throw new Error "" Expecting first argument to be a key (string) or props (plain-object). Got: #{} formattedInspect key

    [subscriptionState, setSubscriptionState] = useState {}

    useEffect
      ->
        subscriptionObject = new SubscriptionObject setSubscriptionState
        subscriptionObject.extendModelRegistry modelRegistry
        subscriptionObject.subscribe {} modelName, key, initialModelRecord, stateField: modelName
        -> subscriptionObject.unsubscribeAll()

      [] key

    subscriptionState

getSubscriptionHooks = (modelRegistry) ->
  modelRegistry extract models
  log getSubscriptionHooks: {} models
  object v, name from models with-key lowerCamelCase "" use #{name}
    makeSubscriberHook name, modelRegistry

registerClasses = (PipelineClasses, pipelineRegistry) ->
  each PipelineClass in PipelineClasses
    PipelineClass.registry pipelineRegistry
    PipelineClass.postCreateConcreteClass {}

initArtEry: (PipelineClasses) ->
  global.modelRegistry = modelRegistry = new ModelRegistry
  global.pipelineRegistry = pipelineRegistry = new PipelineRegistry

  log initArtEryA: {} PipelineClasses

  ArtConfig.configure()
  registerClasses PipelineClasses, pipelineRegistry
  log initArtEryB: {} pipelineRegistry
  pipelineRegistry.session.loadSession()

  {}
    models = log global.models = defineModelsForAllPipelines pipelineRegistry, modelRegistry
    subscriptions = getSubscriptionHooks modelRegistry
    pipelines = global.pipeline = pipelineRegistry.pipelines
    pipelineRegistry
    modelRegistry
